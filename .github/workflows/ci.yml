name: CI Build and Test


on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Debug

jobs:
  # Job 1: Code Quality Checks (runs first, fastest feedback)
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
        
    - name: Check Code Quality
      run: |
        echo "Running code quality checks..."
        
        # Check for common issues
        echo "Checking for TODO/FIXME comments:"
        grep -r "TODO\|FIXME" src/ include/ || echo "No TODO/FIXME found"
        
        # Check for trailing whitespace
        echo "Checking for trailing whitespace:"
        if git ls-files '*.c' '*.h' '*.md' 'Makefile' | xargs -r grep -nE "[[:space:]]+$"; then
          echo "✗ Found trailing whitespace"
          exit 1
        else
          echo "✓ No trailing whitespace found"
        fi
        
        # Check for tabs vs spaces consistency
        echo "Checking indentation consistency:"
        if find src include -type f \( -name "*.c" -o -name "*.h" \) -print0 | xargs -0 -r grep -l $'\t'; then
          echo "✗ Found mixed tabs/spaces"
          exit 1
        else
          echo "✓ Consistent indentation"
        fi

  # Job 2: Build Kernel and Dependencies
  build:
    runs-on: ubuntu-latest
    needs: code-quality  # Wait for code quality to pass
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential nasm gcc-multilib grub-pc-bin grub-common xorriso qemu-system-x86 ccache

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ hashFiles('Makefile', 'src/**/*.c', 'include/**/*.h') }}
        restore-keys: |
          ccache-${{ runner.os }}-

    - name: Prime ccache
      run: |
        mkdir -p ~/.ccache
        ccache --zero-stats
        ccache --max-size=500M
      env:
        CCACHE_DIR: ~/.ccache

    - name: Get Version Information
      id: version
      run: |
        MAJOR=$(grep "VERSION_MAJOR = " Makefile | cut -d' ' -f3 | tr -d '\r\n' | tr -d ' ')
        MINOR=$(grep "VERSION_MINOR = " Makefile | cut -d' ' -f3 | tr -d '\r\n' | tr -d ' ')
        PATCH=$(grep "VERSION_PATCH = " Makefile | cut -d' ' -f3 | tr -d '\r\n' | tr -d ' ')
        VERSION="${MAJOR}.${MINOR}.${PATCH}"
        # Clean version string of any special characters
        VERSION=$(echo "$VERSION" | tr -d '\r\n\t ' | sed 's/[^0-9.]//g')
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building LevelOS v${VERSION}"
        
    - name: Clean Build Environment
      run: |
        echo "Cleaning previous build..."
        make clean
        
    - name: Build Library Components
      run: |
        echo "Building library components..."
        make lib
        echo "Library build completed"
      env:
        CC: ccache gcc
        CCACHE_DIR: ~/.ccache
        
    - name: Build Kernel
      run: |
        echo "Building LevelOS kernel..."
        if make; then
          echo "Kernel build completed successfully"
          
          # Verify the kernel was actually created
          if [ -f build/level-os-*.bin ]; then
            echo "✅ Kernel binary created: $(ls build/level-os-*.bin)"
            ls -la build/level-os-*.bin
          else
            echo "❌ Kernel binary not found after build!"
            echo "Build directory contents:"
            ls -la build/
            exit 1
          fi
        else
          echo "❌ Kernel build failed!"
          exit 1
        fi
      env:
        CC: ccache gcc
        CCACHE_DIR: ~/.ccache

    - name: ccache statistics
      run: ccache --show-stats
      env:
        CCACHE_DIR: ~/.ccache
        
    - name: Verify Build Artifacts
      run: |
        echo "Verifying build artifacts before upload..."
        
        # Wait a moment for any lingering processes
        sleep 2
        
        echo "Build directory contents:"
        ls -la build/
        
        echo "Looking for kernel binary:"
        if ls build/level-os-*.bin 1> /dev/null 2>&1; then
          echo "✅ Found kernel binary:"
          ls -la build/level-os-*.bin
        else
          echo "❌ No kernel binary found!"
          echo "Available files in build/:"
          find build/ -type f | head -10
          exit 1
        fi
        
        echo "Checking build directory structure:"
        find build/ -type f | head -10
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: levelos-build-${{ steps.version.outputs.version }}
        path: |
          build/
        retention-days: 7

  # Job 3: Create Bootable ISO
  create-iso:
    runs-on: ubuntu-latest
    needs: build  # Wait for build to complete
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install ISO tooling
      run: |
        sudo apt-get update
        sudo apt-get install -y grub-pc-bin grub-common xorriso
        
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: levelos-build-${{ needs.build.outputs.version }}
        path: build/
        
    - name: Fix File Permissions
      run: |
        echo "Fixing file permissions..."
        chmod +x build/level-os-*.bin || echo "No binary files to fix"
        ls -la build/
        
    - name: Create Bootable ISO
      run: |
        echo "Creating bootable ISO..."
        if ! command -v grub-mkrescue >/dev/null 2>&1; then
          echo "❌ grub-mkrescue not available after installation"
          exit 1
        fi
        if ! command -v xorriso >/dev/null 2>&1; then
          echo "❌ xorriso not available after installation"
          exit 1
        fi

        if make iso; then
          echo "✅ ISO creation successful"
        else
          echo "❌ ISO creation failed"
          exit 1
        fi

        # List what was actually created
        echo "Build directory contents:"
        ls -la build/ || echo "Build directory listing failed"
        
    - name: Verify Multiboot Compliance
      run: |
        echo "Verifying multiboot compliance:"
        if command -v grub-file >/dev/null 2>&1; then
          if grub-file --is-x86-multiboot build/level-os-*.bin; then
            echo "✓ Multiboot compliant"
          else
            echo "✗ Multiboot check failed"
            exit 1
          fi
        else
          echo "⚠️  grub-file not available"
          exit 1
        fi
        
    - name: Upload ISO Artifact
      uses: actions/upload-artifact@v4
      with:
        name: levelos-iso-${{ needs.build.outputs.version }}
        path: build/level-os-*.iso
        retention-days: 7

  # Job 4: Run Tests
  test:
    runs-on: ubuntu-latest
    needs: build  # Can run in parallel with create-iso
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install test tooling
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential nasm gcc-multilib qemu-system-x86
        
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: levelos-build-${{ needs.build.outputs.version }}
        path: build/
        
    - name: Run host-side string tests
      run: |
        set -euo pipefail

        cat <<'EOF' >/tmp/string_tests.c
        #include <assert.h>
        #include "lib/string.h"

        int main(void) {
          char buf[8];
          memset(buf, 'A', sizeof(buf));
          assert(strlen("hello") == 5);
          assert(strlen("") == 0);
          memset(buf, 0, sizeof(buf));
          memcpy(buf, "abcd", 5);
          assert(memcmp(buf, "abcd", 5) == 0);
          buf[2] = 'z';
          assert(memcmp(buf, "abzd", 4) < 0);
          return 0;
        }
        EOF

        gcc -std=gnu11 -Wall -Wextra -fno-builtin -Iinclude -Isrc/lib src/lib/string.c /tmp/string_tests.c -o /tmp/string_tests
        /tmp/string_tests
        
    - name: Test Kernel Boot (QEMU)
      run: |
        set -euo pipefail
        echo "Testing kernel boot in QEMU (headless)..."

        if command -v qemu-system-i386 >/dev/null 2>&1; then
          echo "QEMU available, running boot test..."
          set +e
          timeout 20s qemu-system-i386 -kernel build/level-os-*.bin -nographic -serial stdio -display none >build/qemu-console.log 2>&1
          status=$?
          set -e
          if [ "$status" -eq 0 ]; then
            echo "✅ QEMU exited cleanly"
          elif [ "$status" -eq 124 ]; then
            echo "⚠️  QEMU timed out after 20 seconds (expected for headless runs)"
          else
            echo "❌ QEMU boot test failed with status $status"
            cat build/qemu-console.log
            exit $status
          fi
        else
          echo "⚠️  QEMU not available, skipping boot test"
          exit 1
        fi

    - name: Upload QEMU console log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: qemu-log-${{ needs.build.outputs.version }}
        path: build/qemu-console.log
        if-no-files-found: warn

  # Job 5: Verification and Summary
  verify:
    runs-on: ubuntu-latest
    needs: [build, create-iso, test]  # Wait for all build jobs
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install tooling for verification
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential nasm gcc-multilib grub-pc-bin grub-common xorriso qemu-system-x86
        
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      
    - name: Verify Build Artifacts
      run: |
        echo "Verifying build artifacts..."
        make info
        
        # Check if kernel binary exists
        if [ -f "levelos-build-"*/level-os-*.bin ] || [ -f "build/level-os-"*.bin ]; then
          echo "✓ Kernel binary created"
        else
          echo "✗ Kernel binary missing"
          echo "Available files:"
          find . -name "*.bin" 2>/dev/null || echo "No .bin files found"
          ls -la levelos-build-*/ 2>/dev/null || echo "No build artifacts directory"
          exit 1
        fi
        
        # Check if ISO exists (don't fail if missing, just report)
        if [ -f "levelos-iso-"*/level-os-*.iso ] || [ -f "build/level-os-"*.iso ]; then
          echo "✓ ISO image created"  
        else
          echo "⚠ ISO image missing (this may be expected if ISO creation failed)"
        fi
        
    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up CI build..."
        make clean
        rm -rf levelos-*
        
    - name: CI Summary
      if: always()
      run: |
        echo "=========================="
        echo "LevelOS CI Summary"  
        echo "=========================="
        echo "PR: #${{ github.event.number }}"
        echo "Build Status: ${{ needs.build.result }}"
        echo "Test Status: ${{ needs.test.result }}"
        echo "ISO Status: ${{ needs.create-iso.result }}"
        echo "Commit: ${{ github.sha }}"
        
        # Consider build successful if build and tests pass (ISO is optional)
        if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.test.result }}" = "success" ]; then
          echo "✓ Core functionality working - ready for merge!"
          if [ "${{ needs.create-iso.result }}" != "success" ]; then
            echo "⚠ Note: ISO creation had issues but this doesn't block the merge"
          fi
        else
          echo "✗ CI failed - please fix issues before merging"
          exit 1
        fi